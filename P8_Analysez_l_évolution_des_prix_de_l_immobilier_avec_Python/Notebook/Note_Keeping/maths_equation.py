m, n = symbols('m n', integer=True)
X = MatrixSymbol('X', m, n+1)
theta = MatrixSymbol('theta', n+1, 1)
Y = MatrixSymbol('Y', m, 1)
F = MatrixSymbol('F', m, 1)
J = Function('J')(theta)
alpha = Matrix([symbols('alpha')])


eq1 = Eq(X, m * (n + 1))
eq2 = Eq(theta, (n + 1) * 1)
eq3 = Eq(Y, m * 1)
eq4 = Eq(F, X * theta)
eq5 = Eq(J, (1 / (2 * m)) * ((X * theta - Y).T * (X * theta - Y))[0])
eq6 = Eq(Derivative(J, theta), (1/m) * X.T * (X * theta - Y))

# Afficher les équations
print("Dans un jeu de données, nous avons donc des dimensions ! Des lignes, que nous nommerons 'm', et des colonnes nommées 'n'.")
print("Voici l'équation représentant un jeu de données:")
display(eq1)
print("Voici l'équation représentant les paramètres du modèle de régression linéaire:")
display(eq2)
print("Voici l'équation représentant la cible à prédire:")
display(eq3)
print("Voici l'équation représentant le modèle de régression linéaire:")
display(eq4)
print("Voici l'équation représentant la fonction coût (MSE):")
display(eq5)
print("Voici l'équation représentant le gradient :")
display(eq6)